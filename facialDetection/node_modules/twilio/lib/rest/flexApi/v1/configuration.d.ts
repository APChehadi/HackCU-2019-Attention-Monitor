/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { SerializableClass } from '../../../interfaces';

type ConfigurationStatus = 'ok'|'inprogress'|'notstarted';

/**
 * @description Initialize the ConfigurationList
 *
 * @param version - Version of the resource
 */
declare function ConfigurationList(version: V1): ConfigurationListInstance;

/**
 * Options to pass to fetch
 *
 * @property uiVersion - Pinned UI version
 */
interface ConfigurationInstanceFetchOptions {
  uiVersion?: string;
}

interface ConfigurationListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): ConfigurationContext;
  /**
   * Constructs a configuration
   */
  get(): ConfigurationContext;
}

interface ConfigurationPayload extends ConfigurationResource, Page.TwilioResponsePayload {
}

interface ConfigurationResource {
  account_sid: string;
  attributes: string;
  call_recording_enabled: boolean;
  call_recording_webhook_url: string;
  chat_service_instance_sid: string;
  crm_attributes: string;
  crm_callback_url: string;
  crm_enabled: boolean;
  crm_fallback_url: string;
  crm_type: string;
  date_created: Date;
  date_updated: Date;
  messaging_service_instance_sid: string;
  public_attributes: string;
  runtime_domain: string;
  service_version: string;
  status: ConfigurationStatus;
  taskrouter_offline_activity_sid: string;
  taskrouter_skills: string;
  taskrouter_target_taskqueue_sid: string;
  taskrouter_target_workflow_sid: string;
  taskrouter_taskqueues: string;
  taskrouter_worker_attributes: string;
  taskrouter_worker_channels: string;
  taskrouter_workspace_sid: string;
  ui_attributes: string;
  ui_language: string;
  ui_version: string;
  url: string;
}

interface ConfigurationSolution {
}


declare class ConfigurationContext {
  /**
   * Initialize the ConfigurationContext
   *
   * @param version - Version of the resource
   */
  constructor(version: V1);

  /**
   * create a ConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback?: (error: Error | null, item: ConfigurationInstance) => any): Promise<ConfigurationInstance>;
  /**
   * fetch a ConfigurationInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts?: ConfigurationInstanceFetchOptions, callback?: (error: Error | null, items: ConfigurationInstance) => any): Promise<ConfigurationInstance>;
  /**
   * update a ConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback?: (error: Error | null, items: ConfigurationInstance) => any): Promise<ConfigurationInstance>;
}


declare class ConfigurationInstance extends SerializableClass {
  /**
   * Initialize the ConfigurationContext
   *
   * @property accountSid - The unique id of the Account responsible for this configuration
   * @property dateCreated - The time the Configuration was created, given as GMT in ISO 8601 format
   * @property dateUpdated - The time the Configuration was last updated, given as GMT in ISO 8601 format
   * @property attributes - Attiributes
   * @property status - Status of the Flex onboarding
   * @property taskrouterWorkspaceSid - The unique ID of the TaskRouter Workspace
   * @property taskrouterTargetWorkflowSid - The unique ID of the TaskRouter Target Workflow
   * @property taskrouterTargetTaskqueueSid - The unique ID of the TaskRouter Target TaskQueue
   * @property taskrouterTaskqueues - Array of TaskRouter TaskQueues
   * @property taskrouterSkills - Skill description for TaskRouter workers
   * @property taskrouterWorkerChannels - TaskRouter default channel capacities and availability for workers
   * @property taskrouterWorkerAttributes - The taskrouter_worker_attributes
   * @property taskrouterOfflineActivitySid - The unique ID of the offline activity
   * @property runtimeDomain - Flex resources hosting URL for the main UI
   * @property messagingServiceInstanceSid - Unique 34 character ID of the Messaging Service
   * @property chatServiceInstanceSid - The unique id of the Chat Service this user belongs to
   * @property uiLanguage - Main language of the Flex UI
   * @property uiAttributes - UI Attributes
   * @property uiVersion - Pinned UI version
   * @property serviceVersion - Flex Service version
   * @property callRecordingEnabled - Call recording enabled
   * @property callRecordingWebhookUrl - Call recording webhook url
   * @property crmEnabled - Flag indicating whether CRM is present for Flex
   * @property crmType - CRM Type
   * @property crmCallbackUrl - CRM Callback URL
   * @property crmFallbackUrl - CRM Fallback URL
   * @property crmAttributes - CRM Attributes
   * @property publicAttributes - Public Attributes
   * @property url - The URL for this resource
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: V1, payload: ConfigurationPayload);

  private _proxy: ConfigurationContext;
  accountSid: string;
  attributes: string;
  callRecordingEnabled: boolean;
  callRecordingWebhookUrl: string;
  chatServiceInstanceSid: string;
  /**
   * create a ConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback?: (error: Error | null, items: ConfigurationInstance) => any): void;
  crmAttributes: string;
  crmCallbackUrl: string;
  crmEnabled: boolean;
  crmFallbackUrl: string;
  crmType: string;
  dateCreated: Date;
  dateUpdated: Date;
  /**
   * fetch a ConfigurationInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts?: ConfigurationInstanceFetchOptions, callback?: (error: Error | null, items: ConfigurationInstance) => any): void;
  messagingServiceInstanceSid: string;
  publicAttributes: string;
  runtimeDomain: string;
  serviceVersion: string;
  status: ConfigurationStatus;
  taskrouterOfflineActivitySid: string;
  taskrouterSkills: string;
  taskrouterTargetTaskqueueSid: string;
  taskrouterTargetWorkflowSid: string;
  taskrouterTaskqueues: string;
  taskrouterWorkerAttributes: string;
  taskrouterWorkerChannels: string;
  taskrouterWorkspaceSid: string;
  /**
   * Produce a plain JSON object version of the ConfigurationInstance for serialization.
   * Removes any circular references in the object.
   */
  toJSON(): any;
  uiAttributes: string;
  uiLanguage: string;
  uiVersion: string;
  /**
   * update a ConfigurationInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback?: (error: Error | null, items: ConfigurationInstance) => any): void;
  url: string;
}


declare class ConfigurationPage extends Page<V1, ConfigurationPayload, ConfigurationResource, ConfigurationInstance> {
  /**
   * Initialize the ConfigurationPage
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: ConfigurationSolution);

  /**
   * Build an instance of ConfigurationInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ConfigurationPayload): ConfigurationInstance;
}

export { ConfigurationContext, ConfigurationInstance, ConfigurationList, ConfigurationListInstance, ConfigurationPage, ConfigurationPayload, ConfigurationResource, ConfigurationSolution }
